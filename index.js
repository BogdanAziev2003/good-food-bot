const TelegramBot = require(" ");
const myTgId = 766417676;
const groupId = -4062521049;

const TOKEN = "6603590435:AAGJsw4F1Pk6hrATEbGtbsA3naNqUo1myRM";

const bot = new TelegramBot(TOKEN, { polling: true });

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  let orderMessage;
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text === "/start" && chatId !== groupId) {
    const welcomeMessage = `
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçΩÔ∏è\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—Ç—å –µ–¥—É —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Good Food. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üòä\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
    `;

    await bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: {
        keyboard: [
          [
            {
              text: "–ú–µ–Ω—é üçî",
              web_app: { url: "https://vermillion-sprite-a15645.netlify.app/" },
            },
          ],
        ],
        resize_keyboard: true,
      },
    });
  }

  // –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data);
      const { itemInCard } = data;
      // –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–º–µ—Ç–∏–º–æ—Å—Ç–∏
      const items = splitItemsInCart(itemInCard);

      // –°–æ–∑–¥–∞—é –∏–∑ –∑–∞–∫–∞–∑–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const itemsString = getItemsString(items);

      // –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
      const orderText = createOrderText(data, itemsString);

      // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è—é 2 –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      await bot
        .sendMessage(chatId, orderText, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "acceptButton" },
                { text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancelButton" },
              ],
            ],
          },
        })
        .then((sentMessage) => {
          const messageId = sentMessage.message_id;

          bot.once("callback_query", (query) => {
            const chosenButton = query.data;
            console.log(data);
            // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.editMessageReplyMarkup(
              { inline_keyboard: [] },
              {
                chat_id: chatId,
                message_id: messageId,
              }
            );

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            if (chosenButton === "acceptButton") {
              bot.sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Å—Ç–≤–µ—Ä–∂–¥–µ–Ω");
              if (data.deliveryType === "delivery") {
                bot.sendMessage(
                  chatId,
                  "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–æ–±—â–∏—Ç –≤–∞–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏"
                );
              }

              //
              //
              //
              let textForGroup = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!!!\n${orderText}\n${
                data.deliveryType === "delivery"
                  ? "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å—Å"
                  : ""
              }`;
              bot.sendMessage(groupId, textForGroup);

              //
              //
              //
            } else if (chosenButton === "cancelButton") {
              bot.sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω");
            }
          });
        });
    } catch (e) {
      console.log(e);
    }
  }
});

function splitItemsInCart(itemInCard) {
  const itemsCount = itemInCard.reduce((acc, item) => {
    const existingItem = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers)
    );
    const existingSandwich = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers) &&
        i.sause === item.sause &&
        i.snack === item.snack
    );
    if (item.snack) {
      console.info("sandwich");
      if (existingSandwich) {
        existingItem.count += 1;
      } else {
        acc.push({ ...item, count: 1 });
      }
    } else {
      if (existingItem) {
        existingItem.count += 1;
      } else {
        acc.push({ ...item, count: 1 });
      }
    }
    return acc;
  }, []);

  return itemsCount;
}

function getItemsString(items) {
  let res = "";

  items.forEach((item, index) => {
    res += `${index + 1}. ${item.title} x${item.count} ( ${item.price} ‚ÇΩ)\n`;
    if (item.snack) {
      res += `+${item.snack}\n+${item.sause}\n`;
    }
    if (item.modifiers.length !== 0) {
      res += `–î–æ–±–∞–≤–∫–∏: ${item.modifiers.map(
        (i) => `${i.title.toLowerCase()} x ${i.amount} `
      )}\n`;
    }
    res += "\n";
  });

  return res;
}

function createOrderText(data, cart) {
  const { price, address, phone, deliveryType, payMethod, comment } = data;
  res = `–ó–∞–∫–∞–∑ ‚Ññ32\n\n–ö–æ—Ä–∑–∏–Ω–∞:\n${cart}–¶–µ–Ω–∞: ${price}\n\–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}\n–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${
    payMethod === "cash" ? "–ù–∞–ª–∏—á–Ω—ã–º–∏" : "–ü–µ—Ä–µ–≤–æ–¥–æ–º"
  }\n–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: ${deliveryType === "pickup" ? "–°–∞–º–æ–≤—ã–≤–æ–∑" : "–î–æ—Å—Ç–∞–≤–∫–∞"}\n${
    address !== null ? "–ê–¥—Ä–µ—Å—Å: " + address + "\n" : ""
  }${comment !== null ? "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: " + comment + "\n" : ""}`;
  return res;
}
