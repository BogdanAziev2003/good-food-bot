const TelegramBot = require('node-telegram-bot-api')
const xlsxPopulate = require('xlsx-populate')
const moment = require('moment-timezone')
const axios = require('axios')
const fs = require('fs')

const groupId = -1002099588087
const path = require('path')
const TOKEN = '6916337720:AAETKuZotosMqW9rJu_STS206ys1ziBoUPs'
const bot = new TelegramBot(TOKEN, { polling: true })
const myTgId = 766417676
let maxGoodId = 0
let maxModifierId = 0

let isGoodsChange = false
let isModifiersChange = false

bot.on('message', async (msg) => {
  const chatId = msg.chat.id
  const text = msg.text
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text === '/start' && chatId !== groupId) {
    const welcomeMessage = `
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçΩÔ∏è\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—Ç—å –µ–¥—É —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Good Food. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üòä\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
    `

    await bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: {
        keyboard: [
          [
            {
              text: '–ú–µ–Ω—é üçî',
              web_app: { url: 'https://good-food.tg-delivery.ru/' },
            },
          ],
        ],
        resize_keyboard: true,
      },
    })
  }

  // –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data)
      const { itemInCard } = data
      // –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–º–µ—Ç–∏–º–æ—Å—Ç–∏
      const items = splitItemsInCart(itemInCard)

      // –°–æ–∑–¥–∞—é –∏–∑ –∑–∞–∫–∞–∑–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const itemsString = getItemsString(items)

      // –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
      const orderText = createOrderText(data, itemsString)

      // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è—é 2 –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      await bot
        .sendMessage(chatId, orderText, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'acceptButton' },
                { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancelButton' },
              ],
            ],
          },
        })
        .then((sentMessage) => {
          const messageId = sentMessage.message_id

          bot.once('callback_query', (query) => {
            const chosenButton = query.data
            // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.editMessageReplyMarkup(
              { inline_keyboard: [] },
              {
                chat_id: chatId,
                message_id: messageId,
              }
            )

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            if (chosenButton === 'acceptButton') {
              bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
              if (data.deliveryType === 'delivery') {
                bot.sendMessage(
                  chatId,
                  '–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–æ–±—â–∏—Ç –≤–∞–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏'
                )
              }
              bot.sendMessage(myTgId, orderText, {
                parse_mode: 'HTML',
              })
              let textForGroup = `${orderText}\n${
                data.deliveryType === 'delivery'
                  ? '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å—Å'
                  : ''
              }`
              bot.sendMessage(groupId, textForGroup, {
                parse_mode: 'HTML',
              })
              axios.post('https://server.tg-delivery.ru/api/menu/createOrder', {
                username: msg.from?.username,
                tgId: chatId,
                order: orderText,
                price: data.price,
              })
            } else if (chosenButton === 'cancelButton') {
              bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω')
            }
          })
        })
    } catch (e) {
      console.log(e)
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö')
    }
  }

  if (chatId === groupId) {
    if (text === '–ê–¥–º–∏–Ω–∫–∞') {
      await bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
        reply_markup: {
          keyboard: [
            [
              {
                text: '–ó–∞–∫–∞–∑—ã',
              },
            ],
            [{ text: '–ë–ª—é–¥–∞' }, { text: '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã' }],
          ],
          resize_keyboard: true,
        },
      })
    } else if (text === '–ó–∞–∫–∞–∑—ã') {
      try {
        bot.deleteMessage(chatId, msg.message_id)
        let xlsxPath = path.join(
          __dirname,
          'orders',
          `${getCurrentDateTime()}.xlsx`
        )
        fs.writeFileSync(xlsxPath, '')

        await fetchData('https://server.tg-delivery.ru/api/menu/getOrders')
          .then((data) => {
            data = AOOtoAOA(data)
            xlsxPopulate
              .fromBlankAsync()
              .then((workbook) => {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                const sheet = workbook.sheet(0)

                // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç
                data.forEach((row, rowIndex) => {
                  row.forEach((value, columnIndex) => {
                    sheet.cell(rowIndex + 1, columnIndex + 1).value(value)
                  })
                })

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ñ–∞–π–ª
                return workbook.toFileAsync(xlsxPath)
              })
              .then(() => {
                bot.sendDocument(
                  chatId,
                  xlsxPath,
                  {},
                  {
                    contentType:
                      'pplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                  }
                )
              })
          })
          .finally(() => {
            isGoodsChange = false
            isModifiersChange = false
          })
      } catch (error) {
        console.log(error)
        bot.sendMessage(chatId, 'Xlsx Error: ' + error.message)
      }
    } else if (text === '–ë–ª—é–¥–∞') {
      bot.deleteMessage(chatId, msg.message_id)

      fetchData('https://server.tg-delivery.ru/api/menu/getGoodsName').then(
        (data) => {
          let textForMessage = `–¢–æ–≤–∞—Ä—ã:\n${String(
            data.map((el) => {
              return `${el.id}. ${el.title} - ${el.instock}\n`
            })
          )}`
          console.log(data)
          maxGoodId = data.length

          textForMessage = textForMessage.replaceAll(',', '')
          bot.sendMessage(chatId, textForMessage)
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞')
        }
      )
      isGoodsChange = true
      isModifiersChange = false
    } else if (text === '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã') {
      bot.deleteMessage(chatId, msg.message_id)

      fetchData('https://server.tg-delivery.ru/api/menu/getModifiersName').then(
        (data) => {
          let textForMessage = `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:\n${String(
            data.map((el) => {
              return `${el.id}. ${el.title} - ${el.instock}\n`
            })
          )}`

          maxModifierId = data.length
          textForMessage = textForMessage.replaceAll(',', '')
          bot.sendMessage(chatId, textForMessage)
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞')
        }
      )
      isModifiersChange = true
      isGoodsChange = false
    } else if (isGoodsChange) {
      let isNumber = /^\d+$/.test(text)
      if (!isNumber) {
        bot.sendMessage(chatId, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
      }

      let id = Number(text)
      console.log(maxGoodId)
      if (id > maxGoodId || id < 1) {
        bot.sendMessage(chatId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
      }
      try {
        await axios
          .put('https://server.tg-delivery.ru/api/menu/changeInStock', {
            id: id,
          })
          .then(() => {
            bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')
            isGoodsChange = false
          })
      } catch (error) {
        console.log(error)
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        bot.sendMessage(myTgId, 'Put goods' + error)
      }
    } else if (isModifiersChange) {
      let isNumber = /^\d+$/.test(text)
      if (!isNumber) {
        bot.sendMessage(chatId, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
      }

      let id = Number(text)
      console.log(maxModifierId)
      if (id > maxModifierId || id < 1) {
        bot.sendMessage(
          chatId,
          '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        )
        return
      }
      try {
        await axios
          .put(
            'https://server.tg-delivery.ru/api/menu/changeInStockModifiers',
            {
              id: id,
            }
          )
          .then(() => {
            bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')
            isModifiersChange = false
          })
      } catch (error) {
        console.log(error)
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        bot.sendMessage(myTgId, 'Put modifiers' + error)
      }
    }
  }
})

function splitItemsInCart(itemInCard) {
  const itemsCount = itemInCard.reduce((acc, item) => {
    const existingItem = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers)
    )
    const existingSandwich = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers) &&
        i.sause === item.sause &&
        i.snack === item.snack
    )
    if (item.snack) {
      if (existingSandwich) {
        existingItem.count += 1
      } else {
        acc.push({ ...item, count: 1 })
      }
    } else {
      if (existingItem) {
        existingItem.count += 1
      } else {
        acc.push({ ...item, count: 1 })
      }
    }
    return acc
  }, [])

  return itemsCount
}

function getItemsString(items) {
  let res = ''

  items.forEach((item, index) => {
    res += `${index + 1}. ${item.title} x${item.count} ( ${item.price} ‚ÇΩ)\n`
    if (item.snack) {
      res += `+${item.snack}\n+${item.sause}\n`
    }
    if (item.modifiers.length !== 0) {
      res += `–î–æ–±–∞–≤–∫–∏: ${item.modifiers.map(
        (i) => `${i.title.toLowerCase()} x ${i.amount} `
      )}\n`
    }
    res += '\n'
  })

  return res
}

function createOrderText(data, cart) {
  const {
    price,
    address,
    phone,
    deliveryType,
    payMethod,
    comment,
    discountPrice,
  } = data
  res = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n–ö–æ—Ä–∑–∏–Ω–∞:\n${cart}\–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}\n–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>${
    payMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏' : '–ü–µ—Ä–µ–≤–æ–¥–æ–º'
  }</b>\n–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: <b>${
    deliveryType === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'
  }</b>\n${address !== null ? '–ê–¥—Ä–µ—Å—Å: ' + address + '\n' : ''}${
    comment !== null ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: ' + comment + '\n' : ''
  }`
  res += `\n–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: <b>${price}</b> ‚ÇΩ
–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>${discountPrice}</b> ‚ÇΩ`

  return res
}

function getCurrentDateTime() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ +3
  const currentDate = moment().tz('Europe/Moscow')

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  return currentDate.format('YYYY-MM-DD_HH-mm-ss')
}

async function fetchData(url) {
  try {
    const response = await axios.get(url)
    return response.data
  } catch (error) {
    console.error('Fetch error:', error.message)
    bot.sendMessage(myTgId, 'Fetch error: ' + error.message)
  }
}

function AOOtoAOA(arr) {
  return arr.map((obj) => {
    let array = []
    for (let key in obj) {
      array.push(obj[key])
    }
    return array
  })
}
