const TelegramBot = require("node-telegram-bot-api");

const TOKEN = "6603590435:AAGJsw4F1Pk6hrATEbGtbsA3naNqUo1myRM";

const bot = new TelegramBot(TOKEN, { polling: true });

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text === "/start") {
    const welcomeMessage = `
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçΩÔ∏è\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—Ç—å –µ–¥—É —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Good Food. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üòä\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
    `;

    await bot.sendMessage(chatId, welcomeMessage, {
      reply_markup: {
        keyboard: [
          [
            {
              text: "–ú–µ–Ω—é üçî",
              web_app: { url: "https://vermillion-sprite-a15645.netlify.app/" },
            },
          ],
        ],
        resize_keyboard: true,
      },
    });
  }

  const loremText = `Lorem Ipsum - —ç—Ç–æ —Ç–µ–∫—Å—Ç-"—Ä—ã–±–∞", —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –ø–µ—á–∞—Ç–∏ –∏ –≤—ç–±-–¥–∏–∑–∞–π–Ω–µ. Lorem Ipsum —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π "—Ä—ã–±–æ–π" –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ —Å –Ω–∞—á–∞–ª–∞ XVI –≤–µ–∫–∞. –í —Ç–æ –≤—Ä–µ–º—è –Ω–µ–∫–∏–π –±–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–µ—á–∞—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–ª –±–æ–ª—å—à—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ñ–æ—Ä–º —à—Ä–∏—Ñ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è Lorem Ipsum –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤. Lorem Ipsum –Ω–µ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∂–∏–ª –±–µ–∑ –∑–∞–º–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—è—Ç—å –≤–µ–∫–æ–≤, –Ω–æ –∏ –ø–µ—Ä–µ—à–∞–≥–Ω—É–ª –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω. –ï–≥–æ –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏`;
  if (text === "/data") {
    const messageWithButtons = await bot.sendMessage(chatId, loremText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–ü—Ä–∏–Ω—è—Ç—å", callback_data: "button1" },
            { text: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: "button2" },
          ],
        ],
      },
    });

    const messageId = messageWithButtons.message_id;
    console.log(messageId);

    bot.once("callback_query", async (query) => {
      const chosenButton = query.data;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await bot.deleteMessage(chatId, messageId);

      let acceptedMessage = `–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ`;

      if (isDelivery) {
        acceptedMessage = `–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, —Å–∫–æ—Ä–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–∏–¥–µ—Ç –µ–≥–æ –∏ –æ–≥–ª–∞—Å–∏—Ç –≤–∞–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏`;
      }
      if (chosenButton === "button1") {
        await bot.sendMessage(chatId, acceptedMessage);
      } else if (chosenButton === "button2") {
        // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 2
        await bot.sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω");
      }
    });
  }

  // –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data);
      const { itemInCard } = data;
      console.log(data);
      // –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–º–µ—Ç–∏–º–æ—Å—Ç–∏
      const items = splitItemsInCart(itemInCard);

      // –°–æ–∑–¥–∞—é –∏–∑ –∑–∞–∫–∞–∑–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const itemsString = getItemsString(items);

      const message = createOrderText(data, itemsString);
      await bot.sendMessage(chatId, message);
    } catch (e) {
      console.log(e);
    }
  }
});

function splitItemsInCart(itemInCard) {
  const itemsCount = itemInCard.reduce((acc, item) => {
    const existingItem = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers)
    );
    const existingSandwich = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers) &&
        i.sause === item.sause &&
        i.snack === item.snack
    );
    if (item.snack) {
      console.info("sandwich");
      if (existingSandwich) {
        existingItem.count += 1;
      } else {
        acc.push({ ...item, count: 1 });
      }
    } else {
      if (existingItem) {
        existingItem.count += 1;
      } else {
        acc.push({ ...item, count: 1 });
      }
    }
    return acc;
  }, []);

  return itemsCount;
}

function getItemsString(items) {
  let res = "";

  items.forEach((item, index) => {
    res += `${index + 1}. ${item.title} x${item.count} ( ${item.price} ‚ÇΩ)\n`;
    if (item.snack) {
      res += `+${item.snack}\n+${item.sause}\n`;
    }
    if (item.modifiers.length !== 0) {
      res += `–î–æ–±–∞–≤–∫–∏: ${item.modifiers.map(
        (i) => `${i.title.toLowerCase()} x ${i.amount} `
      )}\n`;
    }
    res += "\n";
  });

  return res;
}

function createOrderText(data, cart) {
  const { price, address, phone, deliveryType, payMethod, comment } = data;
  res = `–ó–∞–∫–∞–∑ ‚Ññ32\n\n–ö–æ—Ä–∑–∏–Ω–∞:\n${cart}–¶–µ–Ω–∞: ${price}\n\–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`;
  return res;
}
