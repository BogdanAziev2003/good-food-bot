const TelegramBot = require("node-telegram-bot-api")
const xlsxPopulate = require("xlsx-populate")
const moment = require("moment-timezone")
const axios = require("axios")
const fs = require("fs")
const path = require("path")
require("dotenv").config()

let goodsId
let modifiersId
let isGoodsChange = false
let isModifiersChange = false
const userData = []

let groupId = Number(process.env.GROUP_ID)

const bot = new TelegramBot(process.env.TOKEN, { polling: true })

bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const text = msg.text
  const repliedMessageText = msg?.reply_to_message?.text
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text === "/start" && chatId !== groupId) {

    const welcomeMessage = `
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçΩÔ∏è\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—Ç—å –µ–¥—É —Å –∫–∞—Ñ–µ Good Food. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. üòä\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:
    `
    try{

      await bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
          keyboard: [
            [
              {
                text: "–ú–µ–Ω—é üçî",
                web_app: { url: "https://good-food.tg-delivery.ru/" },
              },
            ],
          ],
          resize_keyboard: true,
        },
      })
    }catch(error){
      bot.sendMessage(process.env.MY_TG_ID, error)
    }


  }

  // –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data)
      const { itemInCard } = data
      // –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ–º–µ—Ç–∏–º–æ—Å—Ç–∏
      const items = splitItemsInCart(itemInCard)

      // –°–æ–∑–¥–∞—é –∏–∑ –∑–∞–∫–∞–∑–∞ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const itemsString = getItemsString(items)

      // –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
      const orderText = createOrderText(data, itemsString, chatId)

      fetchData(
        `https://server.tg-delivery.ru/api/menu/getOrdersById/${chatId}`
      )
        .then((data) => {
          console.log(data)

          if (!data.length) {
            orderText += `–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>${price * 0.9}</b>`
          }
        })
        .then(() => {
          bot
            .sendMessage(chatId, orderText, {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "acceptButton" },
                    { text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancelButton" },
                  ],
                ],
              },
            })
            .then((sentMessage) => {
              const messageId = sentMessage.message_id

              bot.once("callback_query", (query) => {
                const chosenButton = query.data
                // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.editMessageReplyMarkup(
                  { inline_keyboard: [] },
                  {
                    chat_id: chatId,
                    message_id: messageId,
                  }
                )

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
                if (chosenButton === "acceptButton") {
                  let addText = `${
                    data.deliveryType === "delivery"
                      ? "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–æ–±—â–∏—Ç –≤–∞–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                      : ""
                  }${
                    data.payMethod === "card"
                      ? "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n|_ 2202 2061 6829 6213\n|_ –ê—Ä—Å–µ–Ω –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –¢."
                      : ""
                  }`

                  bot
                    .sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                    .then(() => {
                      if (addText) bot.sendMessage(chatId, addText)
                    })

                  let textForGroup = `${orderText}\n${
                    data.deliveryType === "delivery"
                      ? "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å"
                      : ""
                  }`

                  textForGroup += `\nTelegram id: "${chatId}"`

                  bot.sendMessage(groupId, textForGroup, {
                    parse_mode: "HTML",
                  })

                  axios.post(
                    "https://server.tg-delivery.ru/api/menu/createOrder",
                    {
                      username: msg.from?.username,
                      tgId: chatId,
                      order: orderText,
                      price: data.price,
                    }
                  )
                } else if (chosenButton === "cancelButton") {
                  bot.sendMessage(chatId, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                }
              })
            })
        })
      // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è—é 2 –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    } catch (e) {
      console.log(e)
      bot.sendMessage(chatId, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
      bot.sendMessage(process.env.MY_TG_ID, e)
    }
  }

  if (chatId === groupId) {
    if (text === "–ê–¥–º–∏–Ω–∫–∞") {
      await bot.sendMessage(chatId, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", {
        reply_markup: {
          keyboard: [
            [
              {
                text: "–ó–∞–∫–∞–∑—ã",
              },
            ],
            [{ text: "–ë–ª—é–¥–∞" }, { text: "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã" }],
          ],
          resize_keyboard: true,
        },
      })
    } else if (text === "–ó–∞–∫–∞–∑—ã") {
      try {
        bot.deleteMessage(chatId, msg.message_id)
        let xlsxPath = path.join(
          __dirname,
          "orders",
          `${getCurrentDateTime()}.xlsx`
        )
        fs.writeFileSync(xlsxPath, "")

        await fetchData("https://server.tg-delivery.ru/api/menu/getOrders")
          .then((data) => {
            data = AOOtoAOA(data)
            xlsxPopulate
              .fromBlankAsync()
              .then((workbook) => {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                const sheet = workbook.sheet(0)

                // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç
                data.forEach((row, rowIndex) => {
                  row.forEach((value, columnIndex) => {
                    sheet.cell(rowIndex + 1, columnIndex + 1).value(value)
                  })
                })

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ñ–∞–π–ª
                return workbook.toFileAsync(xlsxPath)
              })
              .then(() => {
                bot.sendDocument(
                  chatId,
                  xlsxPath,
                  {},
                  {
                    contentType:
                      "pplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                  }
                )
              })
          })
          .finally(() => {
            isGoodsChange = false
            isModifiersChange = false
          })
      } catch (error) {
        console.log(error)
        bot.sendMessage(process.env.MY_TG_ID, "Xlsx Error: " + error.message)
        bot.sendMessage(chatId, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
      }
    } else if (text === "–ë–ª—é–¥–∞") {
      bot.deleteMessage(chatId, msg.message_id)

      fetchData("https://server.tg-delivery.ru/api/menu/getGoodsName")
        .then((data) => {
          let textForMessage = `–¢–æ–≤–∞—Ä—ã:\n${String(
            data.map((el) => {
              return `${el.id}. ${el.title} - ${el.instock}\n`
            })
          )}`
          goodsId = data.map((el) => el.id)

          textForMessage = textForMessage.replaceAll(",", "")
          bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞")
          bot.sendMessage(chatId, textForMessage)
        })
        .then(() => {
          isGoodsChange = true
          isModifiersChange = false
        })
    } else if (text === "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã") {
      bot.deleteMessage(chatId, msg.message_id)

      fetchData("https://server.tg-delivery.ru/api/menu/getModifiersName")
        .then((data) => {
          let textForMessage = `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:\n${String(
            data.map((el) => {
              return `${el.id}. ${el.title} - ${el.instock}\n`
            })
          )}`

          modifiersId = data.map((el) => el.id)
          textForMessage = textForMessage.replaceAll(",", "")
          bot.sendMessage(chatId, textForMessage)
          bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
        })
        .then(() => {
          isModifiersChange = true
          isGoodsChange = false
        })
    } else if (isGoodsChange) {
      if (!goodsId.includes(Number(text))) {
        bot.sendMessage(
          chatId,
          "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        isGoodsChange = false
        isModifiersChange = false
        return
      }

      let id = Number(text)

      try {
        await axios
          .put("https://server.tg-delivery.ru/api/menu/changeInStock", {
            id: id,
          })
          .then(() => {
            bot.sendMessage(chatId, "–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
            isGoodsChange = false
            isModifiersChange = false
          })
      } catch (error) {
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞")
        bot.sendMessage(process.env.MY_TG_ID, "Put goods" + error)
      }
    } else if (isModifiersChange) {
      if (!modifiersId.includes(Number(text))) {
        bot.sendMessage(
          chatId,
          "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        isGoodsChange = false
        isModifiersChange = false
        return
      }

      let id = Number(text)

      try {
        await axios
          .put(
            "https://server.tg-delivery.ru/api/menu/changeInStockModifiers",
            {
              id: id,
            }
          )
          .then(() => {
            bot.sendMessage(chatId, "–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
            isModifiersChange = false
            isGoodsChange = false
          })
      } catch (error) {
        console.log(error)
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞")
        bot.sendMessage(process.env.MY_TG_ID, "Put modifiers" + error)
      }
    } else if (msg.reply_to_message) {
      if (msg.text === undefined || repliedMessageText === undefined) {
        return
      }

      if (!repliedMessageText.includes("Telegram id")) {
        bot.sendMessage(
          groupId,
          "–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        return
      }
      const splitedMessage = repliedMessageText.split("\n")
      const priceText = splitedMessage.filter((el) => el.includes("–¶–µ–Ω–∞"))
      const priceTextArray = priceText[priceText.length - 1].split(" ")
      const price = Number(priceTextArray[priceTextArray.length - 2])
      if (Number.isNaN(price)) {
        bot.sendMessage(groupId, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ü–µ–Ω–æ–π")
        console.log(price)
        return
      }

      const userTgId = splitedMessage[splitedMessage.length - 1].split('"')[1]

      // ---------------------------------
      try {
        const splitedText = text.split("\n")
        if (splitedText.length > 2) {
          bot.sendMessage(
            groupId,
            "–í –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ –±–æ–ª—å—à–µ 2—Ö —Å—Ç—Ä–æ–∫"
          )
          return
        }
        const [minutes, taxiPrice] = splitedText[0]
          .split(" ")
          .map((el) => Number(el))
        console.log(minutes, taxiPrice)

        if (Number.isNaN(minutes)) {
          bot.sendMessage(groupId, "–í—Ä–µ–º—è –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
          return
        }

        if (taxiPrice !== undefined && Number.isNaN(taxiPrice)) {
          bot.sendMessage(
            groupId,
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
          )
          return
        }

        let textForSend = `–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç.
–ë—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.
${
  taxiPrice
    ? `–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${taxiPrice} ‚ÇΩ
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: ${taxiPrice + price} ‚ÇΩ`
    : ""
}
${splitedText[1] ? splitedText[1] : ""}`
        console.log(true)
        bot.sendMessage(
          groupId,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + textForSend
        )
        bot.sendMessage(userTgId, textForSend)
      } catch (error) {
        console.log(error)
        bot.sendMessage(
          process.env.MY_TG_ID,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )
      }
    }
  }
})

function splitItemsInCart(itemInCard) {
  const itemsCount = itemInCard.reduce((acc, item) => {
    const existingItem = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers)
    )
    const existingSandwich = acc.find(
      (i) =>
        i.title === item.title &&
        JSON.stringify(i.modifiers) === JSON.stringify(item.modifiers) &&
        i.sause === item.sause &&
        i.snack === item.snack
    )
    if (item.snack) {
      if (existingSandwich) {
        existingItem.count += 1
      } else {
        acc.push({ ...item, count: 1 })
      }
    } else {
      if (existingItem) {
        existingItem.count += 1
      } else {
        acc.push({ ...item, count: 1 })
      }
    }
    return acc
  }, [])

  return itemsCount
}

function getItemsString(items) {
  let res = ""

  items.forEach((item, index) => {
    res += `${index + 1}. ${item.title} x${item.count} ( ${item.price} ‚ÇΩ)\n`
    if (item.snack) {
      res += `+${item.snack}\n+${item.sause}\n`
    }
    if (item.modifiers.length !== 0) {
      res += `–î–æ–±–∞–≤–∫–∏: ${item.modifiers.map(
        (i) => `${i.title.toLowerCase()} x ${i.amount} `
      )}\n`
    }
    res += "\n"
  })

  return res
}

function createOrderText(data, cart, chatId) {
  const {
    price,
    address,
    phone,
    deliveryType,
    payMethod,
    comment,
    discountPrice,
  } = data

  res = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
  
–ö–æ—Ä–∑–∏–Ω–∞:
${cart}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}
–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>${payMethod === "cash" ? "–ù–∞–ª–∏—á–Ω—ã–º–∏" : "–ü–µ—Ä–µ–≤–æ–¥–æ–º"}</b>
–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: <b>${deliveryType === "pickup" ? "–°–∞–º–æ–≤—ã–≤–æ–∑" : "–î–æ—Å—Ç–∞–≤–∫–∞"}</b>
${address !== null ? "–ê–¥—Ä–µ—Å: " + address : ""}
${comment !== null ? "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: " + comment + "\n" : ""}`
  res += ``
  res += `\n–¶–µ–Ω–∞: <b>${price}</b> ‚ÇΩ`

  return res
}

function getCurrentDateTime() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ +3
  const currentDate = moment().tz("Europe/Moscow")

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  return currentDate.format("YYYY-MM-DD_HH-mm-ss")
}

async function fetchData(url) {
  try {
    const response = await axios.get(url)
    return response.data
  } catch (error) {
    console.error("Fetch error:", error.message)
    bot.sendMessage(process.env.MY_TG_ID, "Fetch error: " + error.message)
  }
}

function AOOtoAOA(arr) {
  return arr.map((obj) => {
    let array = []
    for (let key in obj) {
      array.push(obj[key])
    }
    return array
  })
}

function isNumber(value) {
  return typeof value === "number" && isFinite(value)
}


